name: Trigger CI Flow for Apps

on:
  workflow_call:
    inputs:
      workflow_url:
        required: true
        type: string
      node:
        required: true
        type: string

jobs:
  prepare_data:
    name: Prepare data for Workflow
    runs-on: ubuntu-latest
    outputs:
      apps: ${{ steps.get_changed_paths.outputs.data }}
    env:
      GH_TOKEN: ${{ github.token }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0 
          
      - name: Check Repository
        run: |
          echo $GITHUB_REPOSITORY
          if [ "$GITHUB_REPOSITORY" == "duc168/workflows" ]; then
            echo "Workflow skipped for repository 'duc168/workflows'"
            exit 78
          fi
          echo "Run custom workflow"
          
      - name: Get Current Branch Name
        id: get_branch
        run: |
          CURRENT_BRANCH="${{ github.event.pull_request.head.ref }}"
          echo "Current Branch Name: $CURRENT_BRANCH"
          echo "{current_branch}={CURRENT_BRANCH}" >> $GITHUB_OUTPUT
          

      - name: Extract Workflow URL
        id: workflow_url
        run: |
          WORKFLOW_URL="${{ inputs.workflow_url }}"
          echo $WORKFLOW_URL
          # echo "::set-output name=workflow_url::${WORKFLOW_URL}"
          echo "workflow_url=$WORKFLOW_URL" >> $GITHUB_OUTPUT
          
      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJson(github.event) }}
        run: echo "$GITHUB_CONTEXT"

      - name: Get Latest Common Ancestor Commit
        id: ancestor_commit
        env:
          BASE_BRANCH: ${{ github.base_ref }}
        run: |
          COMMON_ANCESTOR_COMMIT=$(git merge-base --fork-point origin/$BASE_BRANCH)
          echo "Latest Common Ancestor Commit SHA: $COMMON_ANCESTOR_COMMIT"
          echo "sha=$COMMON_ANCESTOR_COMMIT" >> $GITHUB_OUTPUT  
          
      - name: Get Latest Commit
        id: get_latest_commit
        run: |
          # LATEST_COMMIT=$(git log -1 --format=%H)
          LATEST_COMMIT="${{ github.event.after }}"
          echo "Latest commit: $LATEST_COMMIT"
          echo "sha=$LATEST_COMMIT" >> $GITHUB_OUTPUT  
          
      - name: Get change path
        id: get_change_path
        run: |
          CHANGED_PATH=$(git diff-tree --no-commit-id --name-only -r ${{ github.event.after }})
          echo "Changed path: $CHANGED_PATH"
          echo "sha=$CHANGED_PATH" >> $GITHUB_OUTPUT  

      - name: Get change paths
        id: get_changed_paths
        run: |
          CHANGED_PATHS=$(git diff --name-only ${{ steps.ancestor_commit.outputs.sha }} ${{ steps.get_latest_commit.outputs.sha }})
          echo "Changed paths: $CHANGED_PATHS"
          all_paths=()
          all_paths_string=""
          for path in $CHANGED_PATHS; do
          if [[ $path =~ apps/([^/]+)/.* ]]; then
              x="${BASH_REMATCH[1]}"
              if ! [[ " ${all_paths[@]} " =~ " $x " ]]
              then        
                  all_paths+=($x)
                  all_paths_string+="$x,"
              fi
          fi
          done
          echo "Changed path string: $all_paths_string"
          echo "data=$all_paths_string" >> $GITHUB_OUTPUT


  prepare_env:
    name: Prepare Env
    needs: prepare_data
    runs-on: ubuntu-latest
    outputs:
      account: ${{ steps.get_account.outputs.data }}
      apex: ${{ steps.get_apex.outputs.data }}
      chatbox: ${{ steps.get_chatbox.outputs.data }}
      chatbot: ${{ steps.get_chatbot.outputs.data }}
      crm: ${{ steps.get_crm.outputs.data }}
      demo: ${{ steps.get_demo.outputs.data }}
      livechat: ${{ steps.get_livechat.outputs.data }}
      management: ${{ steps.get_management.outputs.data }}
      widget-engine-app: ${{ steps.get_widget_engine_app.outputs.data }}
    steps:
      - name: Log change apps
        run: |
          CHANGED_APPS="${{ needs.prepare_data.outputs.apps }}"
          echo "Changed apps from prepare_data job: $CHANGED_APPS"
      - name: Check for account app change
        id: get_account
        run: |
          CHANGED_APPS="${{ needs.prepare_data.outputs.apps }}"
          if [[ $CHANGED_APPS == *"account"* ]]; then
            echo "data=true" >> $GITHUB_OUTPUT
          else
            echo "data=false" >> $GITHUB_OUTPUT
          fi
      - name: Check for apex app change
        id: get_apex
        run: |
          CHANGED_APPS="${{ needs.prepare_data.outputs.apps }}"
          if [[ $CHANGED_APPS == *"apex"* ]]; then
            echo "data=true" >> $GITHUB_OUTPUT
          else
            echo "data=false" >> $GITHUB_OUTPUT
          fi      
      - name: Check for chatbox app change
        id: get_chatbox
        run: |
          CHANGED_APPS="${{ needs.prepare_data.outputs.apps }}"
          if [[ $CHANGED_APPS == *"chatbox"* ]]; then
            echo "data=true" >> $GITHUB_OUTPUT
          else
            echo "data=false" >> $GITHUB_OUTPUT
          fi
      - name: Check for chatbot app change
        id: get_chatbot
        run: |
          CHANGED_APPS="${{ needs.prepare_data.outputs.apps }}"
          if [[ $CHANGED_APPS == *"chatbot"* ]]; then
            echo "data=true" >> $GITHUB_OUTPUT
          else
            echo "data=false" >> $GITHUB_OUTPUT
          fi
      - name: Check for crm app change
        id: get_crm
        run: |
          CHANGED_APPS="${{ needs.prepare_data.outputs.apps }}"
          if [[ $CHANGED_APPS == *"crm"* ]]; then
            echo "data=true" >> $GITHUB_OUTPUT
          else
            echo "data=false" >> $GITHUB_OUTPUT
          fi
      - name: Check for demo app change
        id: get_demo
        run: |
          CHANGED_APPS="${{ needs.prepare_data.outputs.apps }}"
          if [[ $CHANGED_APPS == *"demo"* ]]; then
            echo "data=true" >> $GITHUB_OUTPUT
          else
            echo "data=false" >> $GITHUB_OUTPUT
          fi
      - name: Check for livechat app change
        id: get_livechat
        run: |
          CHANGED_APPS="${{ needs.prepare_data.outputs.apps }}"
          if [[ $CHANGED_APPS == *"livechat"* ]]; then
            echo "data=true" >> $GITHUB_OUTPUT
          else
            echo "data=false" >> $GITHUB_OUTPUT
          fi
      - name: Check for management app change
        id: get_management
        run: |
          CHANGED_APPS="${{ needs.prepare_data.outputs.apps }}"
          if [[ $CHANGED_APPS == *"management"* ]]; then
            echo "data=true" >> $GITHUB_OUTPUT
          else
            echo "data=false" >> $GITHUB_OUTPUT
          fi
      - name: Check for widget-engine-app app change
        id: get_widget_engine_app
        run: |
          CHANGED_APPS="${{ needs.prepare_data.outputs.apps }}"
          if [[ $CHANGED_APPS == *"widget-engine-app"* ]]; then
            echo "data=true" >> $GITHUB_OUTPUT
          else
            echo "data=false" >> $GITHUB_OUTPUT
          fi

  run_changed_account_app_ci:
    name: Run Account App CI
    if: ${{ needs.prepare_env.outputs.account == 'true' }}
    needs: prepare_env
    uses: duc168/workflows/.github/workflows/pnpm_mono_repo_ci_each_app_v1.yml@master
    with:
      app: "account"
      node: ${{ github.event.inputs.node }}

  run_changed_apex_app_ci:
    name: Run Apex App CI
    if: ${{ needs.prepare_env.outputs.apex == 'true' }}
    needs: prepare_env
    uses: duc168/workflows/.github/workflows/pnpm_mono_repo_ci_each_app_v1.yml@master
    with:
      app: "apex"
      node: ${{ github.event.inputs.node }}
  
  run_changed_chatbox_app_ci:
    name: Run Chatbox App CI
    if: ${{ needs.prepare_env.outputs.chatbox == 'true' }}
    needs: prepare_env
    uses: duc168/workflows/.github/workflows/pnpm_mono_repo_ci_each_app_v1.yml@master
    with:
      app: "chatbox"
      node: ${{ github.event.inputs.node }}

  run_changed_chatbot_app_ci:
    name: Run Chatbot App CI
    if: ${{ needs.prepare_env.outputs.chatbot == 'true' }}
    needs: prepare_env
    uses: duc168/workflows/.github/workflows/pnpm_mono_repo_ci_each_app_v1.yml@master
    with:
      app: "chatbot"
      node: ${{ github.event.inputs.node }}

  run_changed_crm_app_ci:
    name: Run CRM App CI
    if: ${{ needs.prepare_env.outputs.crm == 'true' }}
    needs: prepare_env
    uses: duc168/workflows/.github/workflows/pnpm_mono_repo_ci_each_app_v1.yml@master
    with:
      app: "crm"
      node: ${{ github.event.inputs.node }}

  run_changed_demo_app_ci:
    name: Run Demo App CI
    if: ${{ needs.prepare_env.outputs.demo == 'true' }}
    needs: prepare_env
    uses: duc168/workflows/.github/workflows/pnpm_mono_repo_ci_each_app_v1.yml@master
    with:
      app: "demo"
      node: ${{ github.event.inputs.node }}
  
  run_changed_livechat_app_ci:
    name: Run Livechat App CI
    if: ${{ needs.prepare_env.outputs.livechat == 'true' }}
    needs: prepare_env
    uses: duc168/workflows/.github/workflows/pnpm_mono_repo_ci_each_app_v1.yml@master
    with:
      app: "livechat"
      node: ${{ github.event.inputs.node }}

  run_changed_management_app_ci:
    name: Run Management App CI
    if: ${{ needs.prepare_env.outputs.management == 'true' }}
    needs: prepare_env
    uses: duc168/workflows/.github/workflows/pnpm_mono_repo_ci_each_app_v1.yml@master
    with:
      app: "management"
      node: ${{ github.event.inputs.node }}

  run_changed_widget_engine_app_ci:
    name: Run Widget Engine App CI
    if: ${{ needs.prepare_env.outputs.widget-engine-app == 'true' }}
    needs: prepare_env
    uses: duc168/workflows/.github/workflows/pnpm_mono_repo_ci_each_app_v1.yml@master
    with:
      app: "widget-engine-app"
      node: ${{ github.event.inputs.node }}
    

